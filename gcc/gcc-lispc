#!/usr/bin/env python3

################ Lispy: Scheme Interpreter in Python

## (c) Peter Norvig, 2010; See http://norvig.com/lispy.html

from __future__ import division
import fileinput
import io

main_output = io.StringIO("")
function_output = io.StringIO("")

class Instruction(object):
    def __init__(self, op1=None, op2=None):
        self.op1 = op1
        self.op2 = op2

        if self.ops < 1 and op1:
            raise Exception("Too many ops")

        if self.ops < 2 and op2:
            raise Exception("Too many ops")

    def __repr__(self):
        r = self.name

        if self.op1 is not None:
            r += " " + str(self.op1)

        if self.op2 is not None:
            r += " " + str(self.op2)

        return r

class Add(Instruction):
    name = 'ADD'
    ops = 0

class Sub(Instruction):
    name = 'SUB'
    ops = 0

class Mul(Instruction):
    name = 'MUL'
    ops = 0

class Div(Instruction):
    name = 'DIV'
    ops = 0

class Cons(Instruction):
    name = 'CONS'
    ops = 0

class Car(Instruction):
    name = 'CAR'
    ops = 0

class Cdr(Instruction):
    name = 'CDR'
    ops = 0

class Ceq(Instruction):
    name = 'CEQ'
    ops = 2

class Cgt(Instruction):
    name = 'CGT'
    ops = 2

class Cgte(Instruction):
    name = 'CGTE'
    ops = 2

class Atom(Instruction):
    name = 'ATOM'
    ops = 1

class Ldc(Instruction):
    name = 'LDC'
    ops = 1

class Ld(Instruction):
    name = 'LD'
    ops = 2

class St(Instruction):
    name = 'ST'
    ops = 2

class Ldf(Instruction):
    name = 'LDF'
    ops = 1

class Ap(Instruction):
    name = 'AP'
    ops = 1

class Rtn(Instruction):
    name = 'RTN'
    ops = 0

class Sel(Instruction):
    name = 'SEL'
    ops = 2

class Join(Instruction):
    name = 'JOIN'
    ops = 0

class Builtin(object):
    def __init__(self, instr):
        self.instr = instr

################ Symbol, Env classes

Symbol = str

class Env(dict):
    "An environment: a dict of {'var':val} pairs, with an outer Env."
    def __init__(self, parms=(), args=(), outer=None):
        self.update(zip(parms,args))
        self.outer = outer
    def find(self, var):
        "Find the innermost Env where var appears."
        return self if var in self else self.outer.find(var)

def add_globals(env):
    "Add some Scheme standard procedures to an environment."
    import math, operator as op
    env.update(vars(math)) # sin, sqrt, ...
    env.update({
        '+':    Builtin(Add),
        '-':    Builtin(Sub),
        '*':    Builtin(Mul),
        '/':    Builtin(Div),
        '==':   Builtin(Ceq),
        '>':    Builtin(Cgt),
        '>=':   Builtin(Cgte),
        'atom': Builtin(Atom),
        'cons': Builtin(Cons),
        'car':  Builtin(Car),
        'cdr':  Builtin(Cdr),
      #'not':op.not_,
      #'>':op.gt, '<':op.lt, '>=':op.ge, '<=':op.le, '=':op.eq, 
      #'equal?':op.eq, 'eq?':op.is_, 'length':len, 'cons':lambda x,y:[x]+y,
      #'car':lambda x:x[0],'cdr':lambda x:x[1:], 'append':op.add,  
      #'list':lambda *x:list(x), 'list?': lambda x:isa(x,list), 
      #'null?':lambda x:x==[], 'symbol?':lambda x: isa(x, Symbol)
      })
    return env

global_env = add_globals(Env())

isa = isinstance

################ Functions

class Function(object):
    def __init__(self, name, num_args):
        self.name = name
        self.num_args = num_args

def define_func(name, args, body, env):
    emit(function_output, "; function %s %s" % (name, to_string(args)))
    emit(function_output, "%s:" % name)

    func = Function(name, len(args))
    env[name] = func

    local_env = Env(outer=env)

    for i, a in enumerate(args):
        local_env[a] = Ld(0, i)

    # XXX: This only gets us parent frames from the point of function
    # definition, not calling
    eval(body, local_env, out=function_output)

    emit(function_output, Rtn())

################ eval

total_if_count = 0

def eval_if(test, conseq, alt, env, out):
    global total_if_count
    true_label = "if_true_%d" % total_if_count
    false_label = "if_false_%d" % total_if_count
    after_label = "if_after_%d" % total_if_count
    total_if_count += 1

    # Execute the test condition
    eval(test, env, out)

    # Jump to true or false case
    emit(out, Sel(true_label, false_label))

    # After true or false case completion, jump to end
    emit(out, Ldc(1))
    emit(out, Sel(after_label, 0))

    # True case, then join back to above
    emit(out, true_label + ":")
    eval(conseq, env, out)
    emit(out, Join())

    # False case, then join back to above
    emit(out, false_label + ":")
    eval(alt, env, out)
    emit(out, Join())

    # When done, jump to next instructions
    emit(out, after_label + ":")

def eval(x, env=global_env, out=main_output):
    "Evaluate an expression in an environment."
    emit(out, "; eval(%r)" % x)
    if isa(x, Symbol):             # variable reference
        s = env.find(x)[x]
        if isa(s, Instruction):
            emit(out, s)
        return s
    elif not isa(x, list):         # constant literal
        emit(out, Ldc(x))
        return
    #elif x[0] == 'quote':          # (quote exp)
    #    (_, exp) = x
    #    return exp
    elif x[0] == 'if':             # (if test conseq alt)
        (_, test, conseq, alt) = x
        eval_if(test, conseq, alt, env, out)
    #elif x[0] == 'set!':           # (set! var exp)
    #    (_, var, exp) = x
    #    env.find(var)[var] = eval(exp, env)
    #elif x[0] == 'define':         # (define var exp)
    #    (_, var, exp) = x
    #    #env[var] = eval(exp, env)
    #    eval(exp, env)
    #    print(St(0, 0))
    #    return
    #elif x[0] == 'lambda':         # (lambda (var*) exp)
    #    (_, vars, exp) = x
    #    return lambda *args: eval(exp, Env(vars, args, env))
    #elif x[0] == 'begin':          # (begin exp*)
    #    for exp in x[1:]:
    #        val = eval(exp, env)
    #    return val
    elif x[0] == 'defun':           # Function definition
        # (defun name (a1 a2) (body))
        assert(len(x) == 4)
        define_func(x[1], x[2], x[3], env)
    else:                          # (proc exp*)
        emit(out, "; proc '%s'" % x[0])
        exps = [eval(exp, env, out) for exp in x]
        proc = exps.pop(0)
        if isa(proc, Builtin):
            emit(out, proc.instr())
        elif isa(proc, Function):
            emit(out, Ldf(proc.name))
            emit(out, Ap(proc.num_args))
        return
        #return proc(*exps)

################ parse, read, and user interaction

def read(s):
    "Read a Scheme expression from a string."
    return read_from(tokenize(s))

parse = read

def tokenize(s):
    "Convert a string into a list of tokens."
    return s.replace('(',' ( ').replace(')',' ) ').split()

def read_from(tokens):
    "Read an expression from a sequence of tokens."
    if len(tokens) == 0:
        raise SyntaxError('unexpected EOF while reading')
    token = tokens.pop(0)
    if '(' == token:
        L = []
        while tokens[0] != ')':
            L.append(read_from(tokens))
        tokens.pop(0) # pop off ')'
        return L
    elif ')' == token:
        raise SyntaxError('unexpected )')
    else:
        return atom(token)

def atom(token):
    "Numbers become numbers; every other token is a symbol."
    try: return int(token)
    except ValueError:
        try: return float(token)
        except ValueError:
            return Symbol(token)

def to_string(exp):
    "Convert a Python object back into a Lisp-readable string."
    return '('+' '.join(map(to_string, exp))+')' if isa(exp, list) else str(exp)

def emit(output, s):
    print(s, file=output)

def repl(prompt='lis.py> '):
    "A prompt-read-eval-print loop."
    while True:
        val = eval(parse(raw_input(prompt)))
        if val is not None: print(to_string(val))

if __name__ == "__main__":
    for line in fileinput.input():
        line = line.strip()
        if not line:
            continue
        eval(parse(line))

    # Return at the end of the main program,
    if main_output.getvalue():
        emit(main_output, "; Return from main program")
        emit(main_output, Rtn())

    print("; main program")
    print(main_output.getvalue())
    print("; functions")
    print(function_output.getvalue())
