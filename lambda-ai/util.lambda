# util.lambda - general utility functions

# Max and Min functions
(defun max (a b) (if (> a b) a b))
(defun min (a b) (if (> a b) b a))

# Modulo function (modulo x y) = x % y = x - (x/y)*y
(defun modulo (x y) (- x (* (/ x y) y)))

# http://en.wikipedia.org/wiki/Linear_congruential_generator
(defun rand (seed)
    (modulo (+ (* 1103515245 seed) 12345) 65535))

(defun negate (a)
    (- a (* a 2)))

(defun abs (a)
    (if (> a 0)
        (a)
        (negate a)))

# Recursively count length of list
# List ends with the integer 0
(defun lenN (list n)
    (if (atom list)
        (n)
        (lenN (cdr list) (+ n 1))))

# Length of list
(defun len (list)
    (lenN list 0))

# Sum values in list
(defun sum (list)
    (if (atom list)
        (list)
        (+ (car list) (sum (cdr list)))))

# Map function to list
(defun map (func list)
    (if (atom list)
        (list)
        (cons
            (funcall func (car list))
            (map func (cdr list)))))

(defun reduce (func list init)
    (if (atom list)
        (init)
        (funcall func (car list) (reduce func (cdr list) init))))

(defun zip (l1 l2)
    (if (atom l1)
        (0)
        (if (atom l2)
            (0)
            (cons
                (cons (car l1) (car l2))
                (zip (cdr l1) (cdr l2))))))
