# world.lambda - utilities for managing input

# get n-th element of a tuple
(defun getN (t n)
    (if (== n 0)
        (car t)
        (if (atom (cdr t))
            (if (== n 1)
                (cdr t)
# Element beyond end of list requested
                (debug-tag 9999 9999))
            (getN (cdr t) (- n 1)))))

# Parse basic coordinate tuple
(defun getX (coord) (car coord))
(defun getY (coord) (cdr coord))

# Parse out basic world tuple
# World[0] - Map
(defun worldMap (world) (getN world 0))
# World[1] - Status of Lambda-Man
(defun worldLmn (world) (getN world 1))
# World[2] - Status of Ghosts
(defun worldGst (world) (getN world 2))
# World[3] - Status of Fruit
(defun worldFrt (world) (getN world 3))

# Parse Map
# Get contents of the map at x,y
(defun worldMapXY (world x y) (getN (getN (worldMap world) y) x))

(defun worldMapSize (world)
    (cons
        (len (getN (worldMap world) 0))
        (len (worldMap world))))

(defun worldMapSizeX (world)
    (car (worldMapSize world)))

(defun worldMapSizeY (world)
    (cdr (worldMapSize world)))

(defun notWall (world coord)
    (if (== (worldMapXY world (getX coord) (getY coord)) 0)
        (0)
        (1)))

# Parse out Status of Lambda-Man
# Lambda-Man[0] - Vitality
(defun worldLmnVit (world) (getN (worldLmn world) 0))
# Lambda-Man[1] - Location
(defun worldLmnLoc (world) (getN (worldLmn world) 1))
# Lambda-Man[2] - Direction
(defun worldLmnDir (world) (getN (worldLmn world) 2))
# Lambda-Man[3] - Lives remaining
(defun worldLmnLiv (world) (getN (worldLmn world) 3))
# Lambda-Man[4] - Score
(defun worldLmnScr (world) (getN (worldLmn world) 4))

# Total number of ghosts
(defun worldGstCount (world) (len (worldGst world)))

# Get specific ghost number
(defun worldGstN (world n) (getN (worldGst world) n))

# Parse out Status of Ghost
# Ghost[0] - Vitality
(defun ghostVit (ghost) (getN ghost 0))
# Ghost[1] - Location
(defun ghostLoc (ghost) (getN ghost 1))
# Ghost[2] - Direction
(defun ghostDir (ghost) (getN ghost 2))

# TODO parse out present fruit
