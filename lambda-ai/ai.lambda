# ai.lambda - top level organization of lambdaman ai
!include "debug.lambda"
!include "util.lambda"
!include "world.lambda"
!include "run_away.lambda"
!include "tree.lambda"

#===============================
#      AI STATE STRUCTURE
#===============================
# Important to the rest of this file is understanding the structure of the
# AI state, which is given as output of main() and step(), and is input to
# every step.
#
# For now, the format is:
#       [ n, ghostProgs ]
# Which, like in the specification, is shorthand for
#       CONS n (CONS ghostProgs 0)
# n - monotonic counter, starts after main at 0 and is incremented every step
# ghostProgs - memoize the ghostProgs given to input, for later use

# AI STATE HELPER FUNCTIONS
# =========================
# absolutely vital these get updated with the state
#   Getter functions
(defun stateGetN          (state) (getN state 0))
(defun stateGetGhostProgs (state) (getN state 1))
#   Make a new state from component parts
(defun makeState (n ghostProgs) (cons n (cons ghostProgs 0)))
#   Increment N and return new state
(defun stateIncN (state)
    (makeState (+ (stateGetN state) 1) (stateGetGhostProgs state)))
#    Calculate initial AI state
(defun initState (world ghostProgs) (makeState 0 ghostProgs))

(defun bonus (item)
    (if (== item 0)
        (negate 100000)
        (if (== item 1)
            0
            (if (== item 2)
                100
                (if (== item 3)
                    100
                    (if (== item 4)
                        1000
                        (if (== item 5)
                            0
                            (if (== item 6)
                                0
                                0))))))))

(defun same-point (p1 p2)
    (if (== (getX p1) (getX p2))
        (if (== (getY p1) (getY p2))
            1
            0)
        0))

(defun is-ghost (gstat x y)
    0)
#    (if (atom gstat)
#        0
#        (+
#            (same-point (cons x y) (ghostLoc gstat))
#            (is-ghost (cdr gstat) x y))))
    

(defun simple-heur (world x y)
    (+
        (bonus (worldMapXY world x y))
        (* (negate 100000) (is-ghost (worldGst world) x y) )))

# step function, takes in the ai state, and the world state
# returns a pair of: the new ai state, and the move
# STEP ALGORITHM: for now just go n % 4 (modulo
(defun step (state world)
    (cons
        (stateIncN (state))
        (best-move
            (debug-tag 9090 (enumerate-moves
                world
                (lambda (a b c) (simple-heur a b c))
                (getX (worldLmnLoc world))
                (getY (worldLmnLoc world))
                0
                2)))))

# main function, takes in the world, and the ghost programs
# returns a pair of:
# * initial AI state
# * and a closure of the step function, defined above
(defun main (world ghost)
    (cons (initState world ghost) (lambda (a b) (step a b))))
